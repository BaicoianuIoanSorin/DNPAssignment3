@page "/AddPet/{IdFamily:int}/{IdChild:int}"
@using Models
@using WebClient.Data
@using System.Runtime.CompilerServices
@using System.Collections.Immutable
@inject IFamilyService FamilyService
@inject IChildServices ChildServices
@inject NavigationManager NavigationManager

@if (_family == null)
{
    <div class="text-center">
        <h1>This family does not exist.</h1>
    </div>
}
else if (_child == null)
{
    <div class="text-center">
        <h1>This child does not exist.</h1>
    </div>
}
else
{
    <div class="align-content-lg-center">
        <EditForm Model="@_newPet">
            <h3>Add Person</h3>

            <div class="form-row">
                <div class="form-group col-md-4">
                    <span class="input-group-text">Name</span>
                    <input type="text" placeholder="Name" class="form-control" @bind-value="_newPet.Name"/>
                </div>
                <div class="form-group col-md-4">
                    <span class="input-group-text">Species</span>
                    <input type="text" placeholder="Species" class="form-control" @bind-value="_newPet.Species"/>
                </div>
                <div class="form-group col-md-4">
                    <span class="input-group-text">Age</span>
                    <input type="number" placeholder="Age" class="form-control" @bind-value="_newPet.Age"/>
                </div>
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-sm" @onclick="AddPetForChild">Add</button>
            </div>
            <div style="color:red">@errorMessage</div>
        </EditForm>
    </div>
}

@code {
    private string errorMessage;

    [Parameter]
    public int IdFamily { get; set; }

    [Parameter]
    public int IdChild { get; set; }

    private Pet _newPet = new Pet();
    private Family _family = new Family();
    private Child _child = new Child();

    protected override async Task OnParametersSetAsync()
    {
        _family = await FamilyService.GetFamilyAsync(IdFamily);
        _child = await ChildServices.GetChildAsync(IdChild);
    }

    public void AddPetForChild()
    {
        errorMessage = "";
        try
        {
            for (int i = 0; i < _family.Children.Count; i++)
            {
                var child = _family.Children[i];
                if (child.Id == _child.Id)
                {
                    child.Pets.Add(_newPet);
                }
            }
            FamilyService.UpdateAsync(_family);
            NavigationManager.NavigateTo($"/FamilyInfo/{IdFamily}");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

}