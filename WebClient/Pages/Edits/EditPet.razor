@page "/EditPet/{IdFamily:int}/{IdChild:int}/{IdPet:int}"
@using WebClient.Data
@using Microsoft.AspNetCore.Components
@using Models
@inject IPetServices PetServices
@inject NavigationManager NavigationManager
@if (_petToEdit == null)
{
    <div class="text-center">
        <h1>There's no pet with this Id...</h1>
    </div>
}
else
{
    <EditForm Model="@_petToEdit">
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="inputFirstname">Species</label>
                <input type="text" class="form-control" id="inputFirstname" @bind-value="_petToEdit.Species"/>
            </div>
            <div class="form-group col-md-4">
            </div>
            <div class="form-group col-md-2">
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-4">
                <label for="inputAge">Name</label>
                <input type="text" class="form-control col-md-2" @bind-value="_petToEdit.Name"/>
            </div>
            <div class="form-group col-md-4">
                <label for="inputSex">Sex</label>
                <input type="number" class="form-control" id="inputSex" @bind-value="_petToEdit.Age"/>
            </div>
            <div class="form-group col-md-2">

            </div>
            <div class="form-group col-md-2">

            </div>
        </div>
        <div style="color:red">@errorMessage</div>
        <button type="submit" class="btn btn-primary" @onclick="Save">Edit</button>
        <button type="submit" class="btn btn-warning" @onclick="Remove">Remove</button>

    </EditForm>
}

@code {
    private string errorMessage;

    [Parameter]
    public int IdFamily { get; set; }

    [Parameter]
    public int IdChild { get; set; }

    [Parameter]
    public int IdPet { get; set; }

    private Pet _petToEdit = new Pet();

    protected override async Task OnParametersSetAsync()
    {
        errorMessage = "";
        try
        {
            _petToEdit = await PetServices.GetPetAsync(IdPet);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

    public void Save()
    {
        errorMessage = "";

        try
        {
            PetServices.UpdatePetAsync(_petToEdit);
            NavigationManager.NavigateTo($"/FamilyInfo/{IdFamily}");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

    public void Remove()
    {
        errorMessage = "";
        try
        {
            PetServices.RemovePetAsync(IdPet);
            NavigationManager.NavigateTo($"/FamilyInfo/{IdFamily}");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

}