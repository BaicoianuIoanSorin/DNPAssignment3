@page "/EditFamily/{Id:int}"
@using Models
@using WebClient.Data
@using Microsoft.AspNetCore.Components
@inject IFamilyService familyService
@inject NavigationManager NavigationManager
@if (familyToEdit == null)
{
    <div class="text-center">
        <h1>There's no family with this Id...</h1>
    </div>
}
else
{
    <EditForm Model="@familyToEdit">
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="inputStreetname">Street name</label>
                <input type="text" class="form-control" id="inputStreetname" @bind-value="familyToEdit.StreetName"/>
            </div>
            <div class="form-group col-md-6">
                <label for="inputHousenumber">House number</label>
                <input type="text" class="form-control" id="inputHousenumber" @bind-value="familyToEdit.HouseNumber"/>
            </div>
        </div>
        <div style="color:red">@errorMessage</div>
        <button type="submit" class="btn btn-primary" @onclick="Save">Edit</button>
    </EditForm>
}

@code {

    private string errorMessage;
    [Parameter]
    public int Id { get; set; }

    private Family familyToEdit;
    private IList<Family> _families;

    protected override async Task OnParametersSetAsync()
    {
        errorMessage = "";
        try
        {
            familyToEdit = await familyService.GetFamilyAsync(Id);
            _families = await familyService.GetAllFamiliesAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

    public void Save()
    {
        errorMessage = "";
        try
        {
            familyService.UpdateAsync(familyToEdit);
            NavigationManager.NavigateTo($"/FamilyInfo/{Id}");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            Console.WriteLine(e.Message);
        }
    }

}